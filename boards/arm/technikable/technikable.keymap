#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "helper/functions.h"
#include "helper/keypos_mit.h"

// Layers
#define BASE 0
#define SYM  1
#define ADJ  2
#define CD1  3
#define CD2  4
#define CD3  5

// Modifier Combos
#define LSG(kc) LS(LG(kc))
#define LSA(kc) LS(LA(kc))
#define LSC(kc) LS(LC(kc))
#define LAG(kc) LA(LG(kc))
#define LCG(kc) LC(LG(kc))
#define LCA(kc) LC(LA(kc))

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <125>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
    ignore-modifiers;
};

&sl {
    release-after-ms = <1000>;
};

&caps_word {
    continue-list = <LSHFT RSHFT DELETE BSPC UNDERSCORE MINUS>;
};

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_BEHAVIOR(dif_co, macro,
            bindings = <&kp LSG(D) &kp C>;
        )
        ZMK_BEHAVIOR(dif_br, macro,
            bindings = <&kp LSG(D) &kp B>;
        )
    };

    behaviors {
        #define AS(kc) &as LS(kc) kc            // Auto-Shift Key-press
        #define OS(layer) &mo_sl layer layer    // One-Shot Layer
        #define MO(layer) &mo layer             // Momentary Layer

        // Hold Taps
        ZMK_BEHAVIOR(as, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        ) 
        ZMK_BEHAVIOR(mo_sl, hold_tap,
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            bindings = <&mo>, <&sl>;
        )
        ZMK_BEHAVIOR(hm, hold_tap,
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        )
        ZMK_BEHAVIOR(cd, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )
        ZMK_BEHAVIOR(nav, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )
        
        // Mod Morphs
        ZMK_BEHAVIOR(bspc, mod_morph,
            bindings = <&nav LA(BSPC) BSPC>, <&nav LA(DEL) DEL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        )

        // Tap Dances
        ZMK_BEHAVIOR(sft_cw, tap_dance,
            tapping-term-ms = <400>; bindings = <&kp LSHIFT>, <&caps_word>; // 1:(shift), 2:(caps word)
        )
        ZMK_BEHAVIOR(cd_fav, tap_dance,
            tapping-term-ms = <200>; bindings = <&kp LA(ENTER)>, <LAG(L)>; // 1:(suggested actions), 2:(format)
        )
    };

    combos {
        compatible = "zmk,combos";
    
        // #undef COMBO_HOOK
        // #define COMBO_HOOK global-quick-tap-ms = <75>;
        #define FAST_COMBO_MS 30
        #define VERT_COMBO_MS 38
        #define SLOW_COMBO_MS 60

        // horizontal
        ZMK_COMBO_ADV(tilde,         AS(GRAVE),        LT4 LT3,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(equal,         AS(EQUAL),        RT3 RT4,          ALL,   FAST_COMBO_MS)
        
        // vertical
        ZMK_COMBO_ADV(pipe_qmark,    &as QMARK PIPE,   LT3 LM3,          ALL,   VERT_COMBO_MS)
        ZMK_COMBO_ADV(quotes,        AS(SQT),          RT3 RM3,          ALL,   VERT_COMBO_MS)
                                     
        // angled                                   
        ZMK_COMBO_ADV(bslash,        &kp BSLH,         LM0 LT1,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(fslash,        &kp FSLH,         RM0 RT1,          ALL,   FAST_COMBO_MS)
                                                    
        // admin
        ZMK_COMBO_ADV(lh_boot,       &bootloader,      LH0 LB0 LB1 LB2,  BASE,  SLOW_COMBO_MS)  
        ZMK_COMBO_ADV(lh_lock_scrn,  &kp LCG(Q),       LT1 LT2 LT3 LT4,  BASE,  SLOW_COMBO_MS)  
        ZMK_COMBO_ADV(rh_lock_scrn,  &kp LCG(Q),       RT1 RT2 RT3 RT4,  BASE,  SLOW_COMBO_MS)  
    };

    keymap {
        compatible = "zmk,keymap";

        #define XXXXXXX   &none
        #define _______   &trans
        #define TO_BS()   &to BASE
        #define CHAR(ch)  &kp ch
        #define SP(layer) &lt layer SPACE
        #define THUMB()   XXXXXXX
        #define RCLIK()   &kp K_CONTEXT_MENU

        ZMK_LAYER(base_layer,
        #define HR_G(ch) &hm LCMD ch
        #define HR_A(ch) &hm LALT ch
        #define HR_C(ch) &hm LCTRL ch
        #define K_MIN()  AS(MINUS)
        #define K_COM()  AS(COMMA)
        #define K_DOT()  AS(DOT)
        #define K_SEM()  AS(SEMICOLON)

&kp ESC  CHAR(Q)  CHAR(W)  CHAR(F)  CHAR(P)  CHAR(D)  /*****/  CHAR(J)  CHAR(L)  CHAR(U)  CHAR(Y)  K_MIN()  &bspc
&kp TAB  HR_C(A)  HR_A(R)  HR_G(S)  CHAR(T)  CHAR(G)  /*****/  CHAR(M)  CHAR(N)  HR_G(E)  HR_A(I)  HR_C(O)  &kp ENTER
&sft_cw  CHAR(Z)  CHAR(X)  CHAR(C)  CHAR(V)  CHAR(B)  /*****/  CHAR(K)  CHAR(H)  K_COM()  K_DOT()  K_SEM()  &sft_cw
                           THUMB()  RCLIK()  OS(CD1)  SP(SYM)  OS(CD1)  &cd_fav  THUMB()
        )

        ZMK_LAYER(symbols_layer,
        #define NUMB(n) &kp N ## n
        #define NAV_U() &kp UP
        #define NAV_D() &kp DOWN
        #define NAV_L() &nav LA(LEFT) LEFT     // right, right by a word
        #define NAV_R() &nav LA(RIGHT) RIGHT   // left, left by a word
        #define K_BWD() &nav LG(LBRC) LG(LBKT) // back, move to tab on left
        #define K_FWD() &nav LG(RBRC) LG(RBKT) // forwards, move to tab on right
        #define K_CRT() &kp CARET
        #define K_DLR() &kp DLLR
        #define K_PCT() &kp PRCNT
        #define K_AMP() &kp AMPS
        #define K_HSH() &kp HASH
        #define K_STR() &kp STAR
        #define K_SPC() &kp SPACE
        #define B_PAR() &as RPAR LPAR
        #define B_CUR() &as RBRC LBRC
        #define B_SQR() &as RBKT LBKT

_______  B_PAR()  NUMB(1)  NUMB(2)  NUMB(3)  K_CRT()  /*****/  XXXXXXX  K_BWD()  NAV_U()  K_FWD()  _______  _______
_______  B_CUR()  NUMB(4)  NUMB(5)  NUMB(6)  K_DLR()  /*****/  K_AMP()  NAV_L()  NAV_D()  NAV_R()  XXXXXXX  _______
_______  B_SQR()  NUMB(7)  NUMB(8)  NUMB(9)  K_PCT()  /*****/  K_HSH()  K_STR()  _______  _______  _______  _______
                           THUMB()  NUMB(0)  MO(ADJ)  XXXXXXX  MO(ADJ)  XXXXXXX  THUMB()
        )

        ZMK_LAYER(adjust_layer,
        #define FUNC(n)  &kp F ## n
        #define VMUTE()  &kp C_MUTE 
        #define CH_KB()  &kp LCA(SPACE)
        #define SNCAP()  &kp LSG(N4)
        #define VOL(dir) &kp C_VOL_ ## dir
        #define BRI(dir) &kp C_BRI_ ## dir
        #define BT_S(n)  &bt BT_SEL n
        #define BT_CL()  &bt BT_CLR

TO_BS()  XXXXXXX  FUNC(1)  FUNC(2)  FUNC(3)  XXXXXXX  /*****/  XXXXXXX  VOL(DN)  VOL(UP)  VMUTE()  XXXXXXX  XXXXXXX
_______  XXXXXXX  FUNC(4)  FUNC(5)  FUNC(6)  XXXXXXX  /*****/  XXXXXXX  BRI(DN)  BRI(UP)  SNCAP()  CH_KB()  XXXXXXX
_______  XXXXXXX  FUNC(7)  FUNC(8)  FUNC(9)  XXXXXXX  /*****/  BT_S(0)  BT_S(1)  BT_S(2)  BT_S(3)  BT_S(4)  BT_CL()
                           THUMB()  RCLIK()  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  THUMB()
        )

        ZMK_LAYER(code_ref1_layer,
        #define CR1_A() &kp F6             // move (putting it beside R which is rename/move)
        #define CR1_R() &kp LS(F6)         // rename
        #define CR1_C() &kp LAG(C)         // extract constant
        #define CR1_F() &kp LAG(F)         // extract field
        #define CR1_P() &kp LAG(P)         // extract parameter
        #define CR1_V() &kp LAG(V)         // extract variable
        #define CR1_N() &kp LAG(N)         // inline
        #define CR1_M() &kp LAG(M)         // extract method
        #define CR1_L() &kp LAG(L)         // format
        #define CR1_I() &kp LAG(L)         // format (qwerty position)
        #define CR1_S() &kp LAG(T)         // surround
        #define CR1_O() &kp LA(ENTER)      // suggested actions
        #define CR1_B() &cd LG(F9) LSG(F9) // build module, build all
        #define CR1_U() &kp LA(UP)         // extend selection by scope
        #define CR1_E() &kp LA(DOWN)       // decrease selection by scope

TO_BS()  XXXXXXX  XXXXXXX  CR1_F()  CR1_P()  XXXXXXX  /*****/  XXXXXXX  CR1_L()  CR1_U()  XXXXXXX  XXXXXXX  _______
_______  CR1_A()  CR1_R()  CR1_S()  XXXXXXX  XXXXXXX  /*****/  CR1_M()  CR1_N()  CR1_E()  CR1_I()  XXXXXXX  CR1_O()
_______  XXXXXXX  XXXXXXX  CR1_C()  CR1_V()  CR1_B()  /*****/  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  _______
                           THUMB()  RCLIK()  OS(CD2)  XXXXXXX  OS(CD2)  XXXXXXX  THUMB()
        )

        ZMK_LAYER(code_ref2_layer,
        #define CR2_A() &kp F5                   // copy
        #define CR2_R() &kp LG(F6)               // change signature
        #define CR2_U() &cd LSG(UP) LSA(UP)      // move line up, move block up
        #define CR2_E() &cd LSG(DOWN) LSA(DOWN)  // move line down, move block down

TO_BS()  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  /*****/  XXXXXXX  XXXXXXX  CR2_U()  XXXXXXX  XXXXXXX  _______
_______  CR2_A()  CR2_R()  XXXXXXX  XXXXXXX  XXXXXXX  /*****/  XXXXXXX  XXXXXXX  CR2_E()  CR1_I()  XXXXXXX  CR1_O()
_______  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  /*****/  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  _______
                           THUMB()  RCLIK()  OS(CD3)  XXXXXXX  OS(CD3)  XXXXXXX  THUMB()
        )

        ZMK_LAYER(code_nav_layer,
        #define CN1_F() &cd LSG(R) LSG(F)   // find in project, replace in project
        #define CN1_P() &kp LG(N1)          // project tree tab
        #define CN1_S() &kp LG(F12)         // find symbol in file
        #define CN1_T() &kp LSG(T)          // navigate to/from tests
        #define CN1_E() &cd LS(F2) F2       // go to next/last error
        #define CN1_R() &cd LG(N4) LSC(R)   // run tests, open run window
        #define CN1_D() &cd LG(N5) LSC(D)   // run tests in debug mode, open debug window
        #define DBG_I() &cd F7 LS(F7)       // debug: smart step into, step into
        #define DBG_O() &cd LS(F8) F8       // debug: step over, step out
        #define DBG_R() &cd LA(F9) LAG(R)   // debug: run until breakpoint, run until cursor
        #define DBG_B() &cd LG(F8) LA(F8)   // debug: evaluate expression, set breakpoint

TO_BS()  XXXXXXX  XXXXXXX  CN1_F()  CN1_P()  CN1_D()  /*****/  XXXXXXX  DBG_I()  DBG_O()  DBG_R()  DBG_B()  _______
_______  XXXXXXX  CN1_R()  CN1_S()  CN1_T()  XXXXXXX  /*****/  XXXXXXX  XXXXXXX  CN1_E()  CR1_I()  XXXXXXX  CR1_O()
_______  XXXXXXX  XXXXXXX  &dif_co  XXXXXXX  &dif_br  /*****/  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  _______
                           THUMB()  RCLIK()  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  THUMB()
        )
    };
};