#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "helper/functions.h"
#include "helper/keypos.h"

// Layers
#define BASE 0
#define SYMS 1
#define ADJT 2
#define CREF 3
#define CNAV 4

// Modifier Combos
#define LSG(kc) LS(LG(kc))
#define LAG(kc) LA(LG(kc))
#define LCS(kc) LC(LS(kc))
#define LCG(kc) LC(LG(kc))

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <125>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
    ignore-modifiers;
};

&caps_word {
    continue-list = <LSHFT RSHFT DELETE BSPC UNDERSCORE MINUS>;
};

/ {
    chosen {
       zmk,matrix_transform = &mit_transform;
    };

    macros {
        ZMK_BEHAVIOR(dif_co, macro,
            bindings = <&kp LSG(D) &kp C>;
        )
        ZMK_BEHAVIOR(dif_br, macro,
            bindings = <&kp LSG(D) &kp B>;
        )
    };

    behaviors {
        #define F_AS(kc) &fas LS(kc) kc
        ZMK_BEHAVIOR(fas, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )
        
        #define M_AS(kc) &mas LS(kc) kc
        ZMK_BEHAVIOR(mas, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )
        
        #define S_AS(kc) &sas LS(kc) kc
        ZMK_BEHAVIOR(sas, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )

        ZMK_BEHAVIOR(cd, hold_tap,
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        )
        
        ZMK_BEHAVIOR(bspc, mod_morph,
            bindings = <&mt LA(BSPC) BSPC>, <&mt LA(DEL) DEL>;
            mods = <(MOD_LSFT)>;
        )
        
        ZMK_BEHAVIOR(cdr_r, tap_dance,
            tapping-term-ms = <400>;
            bindings = <&kp LS(F6)>, <&kp F6>, <&kp LG(F6)>;
        )
    };

    combos {
        compatible = "zmk,combos";
    
        // #undef COMBO_HOOK
        // #define COMBO_HOOK global-quick-tap-ms = <75>;
        #define FAST_COMBO_MS 20
        #define VERT_COMBO_MS 36
        #define SLOW_COMBO_MS 60

        // horizontal
        ZMK_COMBO_ADV(tilde,              M_AS(GRAVE),      LT4 LT3,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(lshift,             &kp LSHIFT,       LB4 LB3,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(rshift,             &kp RSHIFT,       RB3 RB4,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(lcapsword,          &caps_word,       LB3 LB2,          BASE,  SLOW_COMBO_MS)
        ZMK_COMBO_ADV(rcapsword,          &caps_word,       RB2 RB3,          BASE,  SLOW_COMBO_MS)
        ZMK_COMBO_ADV(esc,                &kp ESC,          LT3 LT2,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(tab,                &kp TAB,          LM3 LM2,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(backspace,          &bspc,            RT2 RT3,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(enter,              &kp ENTER,        RM2 RM3,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(equal,              M_AS(EQUAL),      RT3 RT4,          ALL,   FAST_COMBO_MS)
        
        // vertical
        ZMK_COMBO_ADV(pipe_qmark,         &mas QMARK PIPE,  LT3 LM3,          ALL,   VERT_COMBO_MS)
        ZMK_COMBO_ADV(quotes,             M_AS(SQT),        RT3 RM3,          ALL,   VERT_COMBO_MS)
                                                         
        // angled                                        
        ZMK_COMBO_ADV(fslash,             &kp FSLH,         LT2 LM3,          ALL,   FAST_COMBO_MS)
        ZMK_COMBO_ADV(bslash,             &kp BSLH,         LT2 LM1,          ALL,   FAST_COMBO_MS)
                                                         
        // thumbs                                        
        ZMK_COMBO_ADV(term_less_pgup,     &kp LC(F),        LH2 LT2,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(term_less_pgdn,     &kp LC(B),        LH2 LB0,          ALL,   SLOW_COMBO_MS)
                                                         
        ZMK_COMBO_ADV(l_paren_brac1,      &mas RPAR LPAR,   LH0 LT3,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_curly_brac1,      &mas RBRC LBRC,   LH0 LT2,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_squar_brac1,      &mas RBKT LBKT,   LH0 LT1,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_angle_brac1,      &mas GT LT,       LH0 LT0,          ALL,   SLOW_COMBO_MS)
                                                         
        ZMK_COMBO_ADV(r_angle_brac1,      &mas LT GT,       LH0 RT0,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_squar_brac1,      &mas LBKT RBKT,   LH0 RT1,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_curly_brac1,      &mas LBRC RBRC,   LH0 RT2,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_paren_brac1,      &mas LPAR RPAR,   LH0 RT3,          ALL,   SLOW_COMBO_MS)
                                                         
        ZMK_COMBO_ADV(l_paren_brac2,      &mas RPAR LPAR,   RH0 LT3,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_curly_brac2,      &mas RBRC LBRC,   RH0 LT2,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_squar_brac2,      &mas RBKT LBKT,   RH0 LT1,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(l_angle_brac2,      &mas GT LT,       RH0 LT0,          ALL,   SLOW_COMBO_MS)
                                                         
        ZMK_COMBO_ADV(r_angle_brac2,      &mas LT GT,       RH0 RT0,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_squar_brac2,      &mas LBKT RBKT,   RH0 RT1,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_curly_brac2,      &mas LBRC RBRC,   RH0 RT2,          ALL,   SLOW_COMBO_MS)
        ZMK_COMBO_ADV(r_paren_brac2,      &mas LPAR RPAR,   RH0 RT3,          ALL,   SLOW_COMBO_MS)

        // admin
        ZMK_COMBO_ADV(boot_left,          &bootloader,      LB0 LB1 LB2 LH0,  BASE,  SLOW_COMBO_MS)  
        ZMK_COMBO_ADV(lock_screen_left,   &kp LCG(Q),       LT1 LT2 LT3 LT4,  BASE,  SLOW_COMBO_MS)  
        ZMK_COMBO_ADV(lock_screen_right,  &kp LCG(Q),       RT1 RT2 RT3 RT4,  BASE,  SLOW_COMBO_MS)  
    };

    keymap {
        compatible = "zmk,keymap";

        #define XXXXXXX  &none
        #define _______  &trans
        #define D_MID()  &none &none
        #define TO_BS()  &to BASE

        ZMK_LAYER(base_layer,
        #define K_LC()   &kp LCTRL
        #define K_LA()   &kp LALT
        #define K_LG()   &kp LCMD
        #define K_COM()  &kp COMMA
        #define SYM_SP() &lt SYMS SPACE

S_AS(Q)  M_AS(W)  F_AS(F)  F_AS(P)  M_AS(D)         D_MID()        M_AS(J)   F_AS(L)  F_AS(U)  M_AS(Y)  S_AS(MINUS)
S_AS(A)  M_AS(R)  F_AS(S)  F_AS(T)  F_AS(G)         D_MID()        F_AS(M)   F_AS(N)  F_AS(E)  M_AS(I)  S_AS(O)
S_AS(Z)  M_AS(X)  F_AS(C)  F_AS(V)  F_AS(B)         D_MID()        F_AS(K)   F_AS(H)  K_COM()  &kp DOT  S_AS(SEMI)
                  K_LC()   K_LA()   SYM_SP()        K_LG()         SYM_SP()  &mo CREF &mo CNAV
        )

        ZMK_LAYER(symbols_layer,
        #define ADJ_SP() &lt ADJT SPACE
        #define NAV_L()  &sas LA(LEFT) LEFT
        #define NAV_R()  &sas LA(RIGHT) RIGHT
        #define K_AST()  &kp STAR

&kp N0   &kp  N1  &kp  N2  &kp  N3  &kp CARET       D_MID()        &to ADJT  XXXXXXX  &kp UP   XXXXXXX  _______
&kp EXCL &kp  N4  &kp  N5  &kp  N6  &kp DLLR        D_MID()        &kp AMPS  NAV_L()  &kp DOWN NAV_R()  XXXXXXX
&kp AT   &kp  N7  &kp  N8  &kp  N9  &kp PRCNT       D_MID()        &kp HASH  K_AST()  _______  _______  _______
                  _______  _______  ADJ_SP()        _______        ADJ_SP()  _______  _______
        )

        ZMK_LAYER(adjust_layer,
        #define VMUTE()     &kp C_MUTE 
        #define PLAYP()     &kp C_PLAY_PAUSE 
        #define SNCAP()     &kp LSG(N4)
        #define VOL(name)   &kp C_VOL_ ## name
        #define BRI(name)   &kp C_BRI_ ## name
        #define BT_S(n)     &bt BT_SEL n
        #define BT_CL()      &bt BT_CLR

TO_BS()  &kp  F1  &kp  F2  &kp  F3  XXXXXXX         D_MID()        VOL(DN)  VOL(UP)  VMUTE()  XXXXXXX  TO_BS()
XXXXXXX  &kp  F4  &kp  F5  &kp  F6  XXXXXXX         D_MID()        BRI(DN)  BRI(UP)  SNCAP()  PLAYP()  XXXXXXX
BT_CL()  &kp  F7  &kp  F8  &kp  F9  XXXXXXX         D_MID()        BT_S(0)  BT_S(1)  BT_S(2)  BT_S(3)  BT_S(4)
                  _______  _______  XXXXXXX         _______        XXXXXXX  _______  _______
        )

        ZMK_LAYER(code_refactor_layer,
        #define CDR_A() &kp F5                 // copy (putting it beside R which is rename/move)
        #define CDR_C() &kp LAG(C)             // extract constant
        #define CDR_F() &kp LAG(F)             // extract field
        #define CDR_P() &kp LAG(P)             // extract parameter
        #define CDR_V() &kp LAG(V)             // extract variable
        #define CDR_N() &kp LAG(N)             // inline
        #define CDR_M() &kp LAG(M)             // extract method
        #define CDR_L() &kp LAG(L)             // format
        #define CDR_I() &kp LAG(L)             // format (qwerty position)
        #define CDR_S() &kp LAG(T)             // surround
        #define CDR_T() &kp LC(T)              // refactor
        #define CDR_O() &kp LA(ENTER)          // suggested actions
        #define CDR_B() &cd LG(F9) LSG(F9)     // build module, build all

TO_BS()  XXXXXXX  CDR_F()  CDR_P()  XXXXXXX         D_MID()        XXXXXXX  CDR_L()  XXXXXXX  XXXXXXX  XXXXXXX
CDR_A()  &cdr_r   CDR_S()  CDR_T()  XXXXXXX         D_MID()        CDR_M()  CDR_N()  XXXXXXX  CDR_I()  CDR_O()
XXXXXXX  XXXXXXX  CDR_C()  CDR_V()  CDR_B()         D_MID()        XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX
                  XXXXXXX  XXXXXXX  XXXXXXX         XXXXXXX        XXXXXXX  XXXXXXX  XXXXXXX
        )

        ZMK_LAYER(code_nav_layer,
        #define CDN_P() &kp LG(N1)             // project tree tab
        #define CDN_E() &cd LS(F2) F2          // go to next/last error
        #define CDN_R() &cd LG(N4) LCS(R)      // run tests, open run window
        #define CDN_F() &cd LSG(R) LSG(F)      // find in project, replace in project
        #define CDN_D() &cd LG(N5) LCS(D)      // run tests in debug mode, open debug window
        #define DBG_I() &cd F7 LS(F7)          // debug: smart step into, step into
        #define DBG_O() &cd LS(F8) F8          // debug: step over, step out
        #define DBG_R() &cd LA(F9) LAG(R)      // debug: run until breakpoint, run until cursor
        #define DBG_B() &cd LG(F8) LA(F8)      // debug: evaluate expression, set breakpoint
        #define K_BWD() &cd LG(LBRC) LG(LBKT)  // back, move to tab on left
        #define K_FWD() &cd LG(RBRC) LG(RBKT)  // forwards, move to tab on right

TO_BS()  XXXXXXX  CDN_F()  CDN_P()  CDN_D()         D_MID()        XXXXXXX  DBG_I()  DBG_O()  DBG_R()  DBG_B()
XXXXXXX  CDN_R()  XXXXXXX  XXXXXXX  XXXXXXX         D_MID()        XXXXXXX  XXXXXXX  CDN_E()  K_BWD()  K_FWD()
XXXXXXX  XXXXXXX  &dif_co  XXXXXXX  &dif_br         D_MID()        XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX  XXXXXXX
                  XXXXXXX  XXXXXXX  XXXXXXX         XXXXXXX        XXXXXXX  XXXXXXX  XXXXXXX
        )
    };
};
