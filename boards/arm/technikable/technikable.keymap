#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define BASE 0
#define SYMS 1
#define MODS 2
#define ADJT 3
#define CD_1 4
#define CD_2 5

// Behavior Shortcuts
#define AS(kc) LS(kc) kc
#define BT(n) BT_SEL n

// Layer Taps
#define MODS_SPC() MODS SPACE
#define SYMS_SPC() SYMS SPACE
#define ADJT_SPC() ADJT SPACE

// Modifier Combos
#define LSG(kc) LS(LG(kc))
#define LAG(kc) LA(LG(kc))
#define LCS(kc) LC(LS(kc))
#define LCG(kc) LC(LG(kc))

// Adjust Layer Taps
#define MUTE_MIC  LS(LG(LC(LA(M))))
#define SCRN_CAP  LSG(N4)
#define LOCK_SCRN LCG(Q)

// Code Layer Taps
#define CD_REF_C LAG(C)
#define CD_REF_F LAG(F)
#define CD_REF_P LAG(P)
#define CD_REF_V LAG(V)
#define CD_REF_N LAG(N)
#define CD_REF_M LAG(M)
#define CD_REF_L LAG(L)
#define CD_DBG_R LAG(R)

// Code Layer Hold-Taps
#define CD_REF_R() LS(F6) F6      // move
#define CD_REF_S() LG(F6) LAG(T)  // surround
#define CD_NAV_R() LG(N4) LCS(R)  // open run window, run tests
#define CD_NAV_D() LG(N5) LCS(D)  // open debug window, run tests in debug mode
#define CD_NAV_T() LS(F2) F2      // go to next/last error

// Timeouts
#define COMBO_TIMEOUT 60

&lt {
    quick_tap_ms = <200>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    retro-tap;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
    ignore-modifiers;
};

&caps_word {
    continue-list = <LSHFT RSHFT DELETE BSPC UNDERSCORE MINUS>;
};

/ {
    chosen {
       zmk,matrix_transform = &dual_2u_transform;
    };

    behaviors {
        fas: fast_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping_term_ms = <145>;
            quick_tap_ms = <0>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        mas: medium_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PINKY_AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping_term_ms = <175>;
            quick_tap_ms = <0>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        sas: slow_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PINKY_AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        cd: code_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_HOLD_TAP";
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        /*  0  1  2  3  4 | 5  6|  7  8  9 10 11 */
        /* 12 13 14 15 16 |17 18| 19 20 21 22 23 */
        /* 24 25 26 27 28 |29 30| 31 32 33 34 35 */
        /*       36 37 38         39 40 41       */
        combo_up                { timeout-ms = <COMBO_TIMEOUT>; key-positions = <9 39>;         bindings = <&kp UP>;          };
        combo_left              { timeout-ms = <COMBO_TIMEOUT>; key-positions = <20 39>;        bindings = <&kp LEFT>;        };
        combo_down              { timeout-ms = <COMBO_TIMEOUT>; key-positions = <21 39>;        bindings = <&kp DOWN>;        };
        combo_right             { timeout-ms = <COMBO_TIMEOUT>; key-positions = <22 39>;        bindings = <&kp RIGHT>;       };
        combo_tilde             { timeout-ms = <28>;            key-positions = <0 1>;          bindings = <&mas AS(GRAVE)>;  };
        combo_equal             { timeout-ms = <28>;            key-positions = <10 11>;        bindings = <&mas AS(EQUAL)>;  };
        combo_esc               { timeout-ms = <28>;            key-positions = <1 2>;          bindings = <&kp ESC>;         };
        combo_tab               { timeout-ms = <28>;            key-positions = <13 14>;        bindings = <&kp TAB>;         };
        combo_enter             { timeout-ms = <28>;            key-positions = <21 22>;        bindings = <&kp ENTER>;       };
        combo_backspace         { timeout-ms = <28>;            key-positions = <9 10>;         bindings = <&kp BSPC>;        };
        combo_del1              { timeout-ms = <COMBO_TIMEOUT>; key-positions = <9 10 39>;      bindings = <&kp DELETE>;      };
        combo_del2              { timeout-ms = <COMBO_TIMEOUT>; key-positions = <9 10 40>;      bindings = <&kp DELETE>;      };
        combo_l_sq_curly        { timeout-ms = <28>;            key-positions = <19 31>;        bindings = <&mas LBRC LBKT>;  };
        combo_r_sq_curly        { timeout-ms = <28>;            key-positions = <20 32>;        bindings = <&mas RBRC RBKT>;  };
        combo_fslash            { timeout-ms = <28>;            key-positions = <2 13>;         bindings = <&kp FSLH>;        };
        combo_bslash            { timeout-ms = <28>;            key-positions = <2 15>;         bindings = <&kp BSLH>;        };
        combo_boot_left         { timeout-ms = <COMBO_TIMEOUT>; key-positions = <24 25 26 27>;  bindings = <&bootloader>;     };
        combo_boot_right        { timeout-ms = <COMBO_TIMEOUT>; key-positions = <32 33 34 35>;  bindings = <&bootloader>;     };
        combo_lock_screen_left  { timeout-ms = <COMBO_TIMEOUT>; key-positions = <0 1 2 3>;      bindings = <&kp LOCK_SCRN>;   };
        combo_lock_screen_right { timeout-ms = <COMBO_TIMEOUT>; key-positions = <8 9 10 11>;    bindings = <&kp LOCK_SCRN>;   };
    };

    macros {
        cdn_diff_co: code_diff_commit {
            compatible = "zmk,behavior-macro";
            label = "CODE_NAV_DIFF_COMMIT";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSG(D)>, <&macro_tap &kp C>;
        };
        cdn_diff_br: code_diff_branch {
            compatible = "zmk,behavior-macro";
            label = "CODE_NAV_DIFF_BRANCH";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LSG(D)>, <&macro_tap &kp B>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "BASE";
            bindings = <
/**/&sas AS(Q)     &mas AS(W)     &fas AS(F)     &fas AS(P)     &mas AS(D)        &none &none  &mas AS(J)      &fas AS(L)     &fas AS(U)   &mas AS(Y)     &sas AS(MINUS)
/**/&sas AS(A)     &mas AS(R)     &fas AS(S)     &fas AS(T)     &fas AS(G)        &none &none  &fas AS(M)      &fas AS(N)     &fas AS(E)   &mas AS(I)     &sas AS(O)
/**/&sas AS(Z)     &mas AS(X)     &fas AS(C)     &fas AS(V)     &fas AS(B)        &none &none  &fas AS(K)      &fas AS(H)     &kp COMMA    &kp DOT        &sas AS(SEMI)
/*  &              &*/            &none          &lt MODS_SPC() &lt SYMS_SPC() /* &     &*/    &lt SYMS_SPC()  &lt MODS_SPC() &none
            >;
        };
        symbols_layer {
            label = "SYMBOL";
            bindings = <
/**/&sas AS(GRAVE) &kp N1         &kp N2         &kp N3         &kp CARET         &none &none  &kp STAR        &mas LBRC LPAR &kp UP       &mas RBRC RPAR &sas AS(EQUAL)
/**/&kp EXCL       &kp N4         &kp N5         &kp N6         &kp DLLR          &none &none  &kp AMPS        &kp LEFT       &kp DOWN     &kp RIGHT      &sas AS(SQT)
/**/&kp AT         &kp N7         &kp N8         &kp N9         &kp PRCNT         &none &none  &kp HASH        &fas AS(SQT)   &trans       &trans         &trans
/*  &              &*/            &kp N0         &none          &lt ADJT_SPC() /* &     &*/    &lt ADJT_SPC()  &kp SPACE      &none
            >;
        };
        modifiers_layer {
            label = "MODIFIER";
            bindings = <
/**/&sas AS(GRAVE) &sk LSHFT      &caps_word     &none          &key_repeat       &none &none  &key_repeat     &mas LT LPAR   &kp PG_UP    &mas GT RPAR   &sas AS(EQUAL)
/**/&kp EXCL       &sk LCTRL      &sk LALT       &sk LCMD       &fas QMARK FSLH   &none &none  &fas QMARK FSLH &kp HOME       &kp PG_DN    &kp END        &sas AS(SQT)
/**/&kp AT         &sas AS(SQT)   &mas AS(SQT)   &fas AS(SQT)   &fas PIPE BSLH    &none &none  &fas PIPE BSLH  &fas AS(SQT)   &trans       &trans         &trans
/*  &              &*/            &none          &none          &to CD_1       /* &     &*/    &to CD_1        &none          &none
            >;
        };
        adjust_layer {
            label = "ADJUST";
            bindings = <
/**/&to BASE       &kp F1         &kp F2         &kp F3         &kp LOCK_SCRN    &none &none  &kp C_VOL_DN    &kp C_VOL_UP   &kp C_MUTE   &kp MUTE_MIC   &to BASE
/**/&none          &kp F4         &kp F5         &kp F6         &kp LOCK_SCRN    &none &none  &kp C_BRI_DN    &kp C_BRI_UP   &kp SCRN_CAP &kp C_PP       &none
/**/&bt BT_CLR     &kp F7         &kp F8         &kp F9         &none            &none &none  &bt BT(0)       &bt BT(1)      &bt BT(2)    &bt BT(3)      &bt BT(4)
/*  &              &*/            &none          &none          &none         /* &     &*/    &none           &none          &none
            >;
        };
        code_refactor_layer {
            label = "CODE REFACTOR";
            bindings = <
/**/&to BASE       &none          &kp CD_REF_F   &kp CD_REF_P   &none            &none &none  &none           &kp CD_REF_L   &none        &none          &none
/**/&kp F5         &cd CD_REF_R() &cd CD_REF_S() &kp LC(T)      &none            &none &none  &kp CD_REF_M    &kp CD_REF_N   &none        &none          &none
/**/&none          &none          &kp CD_REF_C   &none          &kp CD_REF_V     &none &none  &none           &none          &none        &none          &none
/*  &              &*/            &none          &none          &to CD_2      /* &     &*/    &to CD_2        &none          &none
            >;
        };
        code_nav_layer {
            label = "CODE NAV";
            bindings = <
/**/&to BASE       &none          &none          &kp LG(N1)     &cd CD_NAV_D()   &none &none  &none           &none          &none        &none          &none
/**/&none          &cd CD_NAV_R() &none          &cd CD_NAV_T() &none            &none &none  &kp LS(F7)      &kp LS(F8)     &kp LA(F9)   &kp CD_DBG_R   &none
/**/&none          &none          &cdn_diff_co   &none          &cdn_diff_br     &none &none  &none           &none          &none        &none          &none
/*  &              &*/            &none          &none          &none         /* &     &*/    &none           &none          &none
            >;
        };
    };
};
