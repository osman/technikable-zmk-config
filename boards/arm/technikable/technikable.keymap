#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layers
#define BASE 0
#define SYMS 1
#define ADJT 2
#define CD_1 3
#define CD_2 4

// Behavior Shortcuts
#define AS(kc) LS(kc) kc
#define BT(n) BT_SEL n

// Layer Taps
#define SYMS_SPC() SYMS SPACE
#define ADJT_SPC() ADJT SPACE

// Modifier Combos
#define LSG(kc) LS(LG(kc))
#define LAG(kc) LA(LG(kc))
#define LCS(kc) LC(LS(kc))
#define LCG(kc) LC(LG(kc))

// Adjust Layer Taps
#define MUTE_MIC  LS(LG(LC(LA(M))))
#define SCRN_CAP  LSG(N4)
#define LOCK_SCRN LCG(Q)

// Code Layer Taps
#define CD_REF_A F5             // copy (putting it beside R which is rename/move)
#define CD_REF_C LAG(C)         // extract constant
#define CD_REF_F LAG(F)         // extract field
#define CD_REF_P LAG(P)         // extract parameter
#define CD_REF_V LAG(V)         // extract variable
#define CD_REF_N LAG(N)         // inline
#define CD_REF_M LAG(M)         // extract method
#define CD_REF_L LAG(L)         // format
#define CD_REF_I LAG(L)         // format (qwerty position)
#define CD_REF_S LAG(T)         // surround
#define CD_REF_T LC(T)          // refactor
#define CD_DBG_R LAG(R)         // debug: run until breakpoint

// Code Layer Hold-Taps
#define CD_REF_B() LG(F9) LSG(F9) // build module, build all
#define CD_NAV_E() LS(F2) F2      // go to next/last error
#define CD_NAV_R() LG(N4) LCS(R)  // run tests, open run window
#define CD_NAV_D() LG(N5) LCS(D)  // run tests in debug mode, open debug window

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <125>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
    ignore-modifiers;
};

&caps_word {
    continue-list = <LSHFT RSHFT DELETE BSPC UNDERSCORE MINUS>;
};

/ {
    chosen {
       zmk,matrix_transform = &mit_transform;
    };

    macros {
        capslock: capslock {
            compatible = "zmk,behavior-macro";
            label = "MACOS_CAPSLOCK";
            tap-ms = <200>;
            #binding-cells = <0>;
            bindings = <&kp CAPS>;
        };
        cdn_diff_co: code_diff_commit {
            compatible = "zmk,behavior-macro";
            label = "CODE_NAV_DIFF_COMMIT";
            #binding-cells = <0>;
            bindings = <&kp LSG(D) &kp C>;
        };
        cdn_diff_br: code_diff_branch {
            compatible = "zmk,behavior-macro";
            label = "CODE_NAV_DIFF_BRANCH";
            #binding-cells = <0>;
            bindings = <&kp LSG(D) &kp B>;
        };
    };


    behaviors {
        fas: fast_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        mas: medium_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RING_AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            quick-tap-ms = <50>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        sas: slow_auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PINKY_AUTO_SHIFT";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        cd: code_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_HOLD_TAP";
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <50>;
            global-quick-tap;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        bspc: delete_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "DELETE_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DELETE>;
            mods = <(MOD_LSFT)>;
        };
        shift_caps: shift_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "LSHIFT_CAPSLOCK";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&capslock>;
        };
        cd_ref_r: code_refactor_r {
            compatible = "zmk,behavior-tap-dance";
            label = "CODE_REFACTOR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LS(F6)>, <&kp F6>, <&kp LG(F6)>;
        };
    };

    // Timeouts
    #define FAST_COMBO_MS 20
    #define VERT_COMBO_MS 36
    #define SLOW_COMBO_MS 60

    combos {
        compatible = "zmk,combos";
        /*  0  1  2  3  4 | 5   6|  7  8  9 10 11 */
        /* 12 13 14 15 16 |17  18| 19 20 21 22 23 */
        /* 24 25 26 27 28 |29  30| 31 32 33 34 35 */
        /*       36 37 38  __39__  40 41 42       */
    
        // horizontal
        combo_tilde             { timeout-ms = <FAST_COMBO_MS>; key-positions = <0 1>;          bindings = <&mas AS(GRAVE)>;  };
        combo_lshift            { timeout-ms = <SLOW_COMBO_MS>; key-positions = <24 25>;        bindings = <&shift_caps>; };
        combo_rshift            { timeout-ms = <SLOW_COMBO_MS>; key-positions = <34 35>;        bindings = <&shift_caps>; };
        combo_esc               { timeout-ms = <FAST_COMBO_MS>; key-positions = <1 2>;          bindings = <&kp ESC>;         };
        combo_tab               { timeout-ms = <FAST_COMBO_MS>; key-positions = <13 14>;        bindings = <&kp TAB>;         };
        combo_backspace         { timeout-ms = <SLOW_COMBO_MS>; key-positions = <9 10>;         bindings = <&bspc>;           };
        combo_enter             { timeout-ms = <FAST_COMBO_MS>; key-positions = <21 22>;        bindings = <&kp ENTER>;       };
        combo_equal             { timeout-ms = <FAST_COMBO_MS>; key-positions = <10 11>;        bindings = <&mas AS(EQUAL)>;  };
        combo_key_repeat1       { timeout-ms = <SLOW_COMBO_MS>; key-positions = <12 13 14 15>;  bindings = <&key_repeat>;     };
        combo_key_repeat2       { timeout-ms = <SLOW_COMBO_MS>; key-positions = <20 21 22 23>;  bindings = <&key_repeat>;     };
        
        // vertical
        combo_pipe_qmark        { timeout-ms = <VERT_COMBO_MS>; key-positions = <1  13>;        bindings = <&mas QMARK PIPE>; };
        combo_quotes            { timeout-ms = <VERT_COMBO_MS>; key-positions = <10 22>;        bindings = <&mas AS(SQT)>;    };
        
        // angled
        combo_fslash            { timeout-ms = <FAST_COMBO_MS>; key-positions = <2 13>;         bindings = <&kp FSLH>;        };
        combo_bslash            { timeout-ms = <FAST_COMBO_MS>; key-positions = <2 15>;         bindings = <&kp BSLH>;        };
        
        // thumbs
        combo_code_refactor     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <37 41>;        bindings = <&mo CD_1>;        };
        combo_code_nav          { timeout-ms = <SLOW_COMBO_MS>; key-positions = <36 42>;        bindings = <&mo CD_2>;        };

        combo_l_paren_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 1>;         bindings = <&mas RPAR LPAR>;  };
        combo_l_curly_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 2>;         bindings = <&mas RBRC LBRC>;  };
        combo_l_squar_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 3>;         bindings = <&mas RBKT LBKT>;  };
        combo_l_angle_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 4>;         bindings = <&mas GT LT>;      };
        
        combo_r_angle_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 7>;         bindings = <&mas LT GT>;      };
        combo_r_squar_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 8>;         bindings = <&mas LBKT RBKT>;  };
        combo_r_curly_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 9>;         bindings = <&mas LBRC RBRC>;  };
        combo_r_paren_brac1     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <38 10>;        bindings = <&mas LPAR RPAR>;  };

        combo_l_paren_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 1>;         bindings = <&mas RPAR LPAR>;  };
        combo_l_curly_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 2>;         bindings = <&mas RBRC LBRC>;  };
        combo_l_squar_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 3>;         bindings = <&mas RBKT LBKT>;  };
        combo_l_angle_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 4>;         bindings = <&mas GT LT>;      };
        
        combo_r_angle_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 7>;         bindings = <&mas LT GT>;      };
        combo_r_squar_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 8>;         bindings = <&mas LBKT RBKT>;  };
        combo_r_curly_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 9>;         bindings = <&mas LBRC RBRC>;  };
        combo_r_paren_brac2     { timeout-ms = <SLOW_COMBO_MS>; key-positions = <40 10>;        bindings = <&mas LPAR RPAR>;  };

        // admin
        combo_boot_left         { timeout-ms = <SLOW_COMBO_MS>; key-positions = <26 27 28 38>;  bindings = <&bootloader>;     };
        combo_lock_screen_left  { timeout-ms = <SLOW_COMBO_MS>; key-positions = <0 1 2 3>;      bindings = <&kp LOCK_SCRN>;   };
        combo_lock_screen_right { timeout-ms = <SLOW_COMBO_MS>; key-positions = <8 9 10 11>;    bindings = <&kp LOCK_SCRN>;   };
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "BASE";
            bindings = <
/**/&sas AS(Q)   &mas AS(W)     &fas AS(F)     &fas AS(P)     &mas AS(D)      &none      &none    &mas AS(J)      &fas AS(L)    &fas AS(U)     &mas AS(Y)     &sas AS(MINUS)
/**/&sas AS(A)   &mas AS(R)     &fas AS(S)     &fas AS(T)     &fas AS(G)      &none      &none    &fas AS(M)      &fas AS(N)    &fas AS(E)     &mas AS(I)     &sas AS(O)
/**/&sas AS(Z)   &mas AS(X)     &fas AS(C)     &fas AS(V)     &fas AS(B)      &none      &none    &fas AS(K)      &fas AS(H)    &kp COMMA      &kp DOT        &sas AS(SEMI)
/*  &            &*/            &kp LCTRL      &kp LALT       &lt SYMS_SPC()  &kp LGUI /*&none*/  &lt SYMS_SPC()  &kp RALT      &kp RCTRL
            >;
        };

        symbols_layer {
            label = "SYMBOL";
            bindings = <
/**/&kp N0       &kp N1         &kp N2         &kp N3         &kp CARET       &none      &none    &to ADJT        &none         &kp UP         &none          &trans
/**/&kp EXCL     &kp N4         &kp N5         &kp N6         &kp DLLR        &none      &none    &kp AMPS        &kp LEFT      &kp DOWN       &kp RIGHT      &none
/**/&kp AT       &kp N7         &kp N8         &kp N9         &kp PRCNT       &none      &none    &kp HASH        &kp STAR      &trans         &trans         &trans
/*  &            &*/            &trans         &trans         &lt ADJT_SPC()  &trans   /*&none*/  &lt ADJT_SPC()  &trans        &trans
            >;
        };

        adjust_layer {
            label = "ADJUST";
            bindings = <
/**/&to BASE     &kp F1         &kp F2         &kp F3         &kp LOCK_SCRN   &none      &none    &kp C_VOL_DN    &kp C_VOL_UP  &kp C_MUTE     &kp MUTE_MIC   &to BASE
/**/&none        &kp F4         &kp F5         &kp F6         &kp LOCK_SCRN   &none      &none    &kp C_BRI_DN    &kp C_BRI_UP  &kp SCRN_CAP   &kp C_PP       &none
/**/&bt BT_CLR   &kp F7         &kp F8         &kp F9         &none           &none      &none    &bt BT(0)       &bt BT(1)     &bt BT(2)      &bt BT(3)      &bt BT(4)
/*  &            &*/            &trans         &trans         &none           &trans   /*&none*/  &none           &trans        &trans
            >;
        };

        code_refactor_layer {
            label = "CODE REFACTOR";
            bindings = <
/**/&to BASE     &none          &kp CD_REF_F   &kp CD_REF_P   &none           &none      &none    &none           &kp CD_REF_L  &none          &none          &none
/**/&kp CD_REF_A &cd_ref_r      &kp CD_REF_S   &kp CD_REF_T   &none           &none      &none    &kp CD_REF_M    &kp CD_REF_N  &none          &CD_REF_I      &none
/**/&none        &none          &kp CD_REF_C   &kp CD_REF_V   &cd CD_REF_B()  &none      &none    &none           &none         &none          &none          &none
/*  &            &*/            &none          &none          &none           &none    /*&none*/  &none           &none         &none
            >;
        };

        code_nav_layer {
            label = "CODE NAV";
            bindings = <
/**/&to BASE     &none          &none          &kp LG(N1)     &cd CD_NAV_D()  &none      &none    &none           &kp LS(F7)    &kp LS(F8)     &kp LA(F9)     &kp CD_DBG_R
/**/&none        &cd CD_NAV_R() &none          &none          &none           &none      &none    &none           &none         &cd CD_NAV_E() &none          &none
/**/&none        &none          &cdn_diff_co   &none          &cdn_diff_br    &none      &none    &none           &none         &none          &none          &none
/*  &            &*/            &none          &none          &none           &none    /*&none*/  &none           &none         &none
            >;
        };
    };
};
